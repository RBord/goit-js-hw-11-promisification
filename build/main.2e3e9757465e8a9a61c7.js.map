{"version":3,"sources":["webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./js/task-03.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAGMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACPD,EAAQ,GAAGF,KACZA,OAILI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCdXK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GAC/B,OAAOb,QAAQC,QAAQW,EAASE,KAAI,SAAAC,GAAI,OAChCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,OAKnEZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAK7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCtBpB,IAOTe,EAAkB,SAAAC,GAEpB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAEzB,IAR2BC,EAAKC,EAQ1BxB,GARqBuB,EAQa,IARRC,EAQa,IAP1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAShDnB,YAAW,WACYqB,KAAKE,SAAW,GAGnCxB,EAAQ,CAACyB,GAAIP,EAAYO,GAAItB,KAAMN,IAEnCsB,EAAOD,EAAYO,MAEpB5B,OAKL6B,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAItB,EAAU,EAAVA,KACrBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGEwB,EAAW,SAAAF,GACbrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAMJR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MACjCvB,KAAKoB,GACLI,MAAMH,GAEPV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MACjCvB,KAAKoB,GACLI,MAAMH,GAEPV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KACjCvB,KAAKoB,GACLI,MAAMH,GAEPV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MACjCvB,KAAKoB,GACLI,MAAMH,K","file":"main.2e3e9757465e8a9a61c7.js","sourcesContent":["export default 'task-01';\r\n\r\n\r\nconst delay = ms => {\r\n    return new Promise(resolve => {\r\n        setTimeout(()=>{\r\n            resolve(`${ms}`)\r\n        }, ms)\r\n    })\r\n};\r\n  \r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","export default 'task-02';\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return Promise.resolve(allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n        )\r\n    )\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n* Должно работать так\r\n*/\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","export default 'task-03';\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n\r\n    return new Promise((resolve, reject)=>{\r\n\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n        \r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n    \r\n            if (canProcess) {\r\n            resolve({id: transaction.id, time: delay});\r\n            } else {\r\n            reject(transaction.id);\r\n            }\r\n        }, delay);\r\n    })\r\n};  \r\n\r\n\r\nconst logSuccess = ({id, time}) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n* Должно работать так\r\n*/\r\nmakeTransaction({ id: 70, amount: 150 })\r\n.then(logSuccess)\r\n.catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n.then(logSuccess)\r\n.catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n.then(logSuccess)\r\n.catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n.then(logSuccess)\r\n.catch(logError);"],"sourceRoot":""}